/* Using QuiCLI v0.5.0                                                                                                                                                                                                                                                                  */const $=function(){const e=e=>{let t=[27,91];for(let s=0;s<e.length;s++)t.push(e.charCodeAt(s));return t.push(109),Buffer.from(t).toString()};return{BOLD:e("1"),DIM:e("2"),UNDERSCORE:e("4"),BLINK:e("5"),INVERT:e("7"),HIDDEN:e("8"),CLEAR:e("0"),BLACK:e("30"),RED:e("31"),GREEN:e("32"),YELLOW:e("33"),BLUE:e("34"),MAGENTA:e("35"),CYAN:e("36"),WHITE:e("37"),BG_BLACK:e("40"),BG_RED:e("41"),BG_GREEN:e("42"),BG_YELLOW:e("43"),BG_BLUE:e("44"),BG_MAGENTA:e("45"),BG_CYAN:e("46"),BG_WHITE:e("47")}}(),cli=function(){class e{constructor(e,t){this.flags=[],this.path=e,this.callback=t}getFlags(){return this.flags}addFlag(e,t="any",s=!1){return this.flags.push({name:e,type:t,required:s}),this}}var t=[];const s=require("readline");let n=!1;return process.addListener("beforeExit",(e=>{!1===n&&(n=!0,(e=>{const s=e.commands.join("."),n=t.find((e=>e.path===s));if(void 0!==n){let t={};e.flags.forEach((e=>{const s=n.getFlags().find((t=>t.name===e.name||"*"===t.name));if(void 0!==s){let n=!0;"any"!==s.type&&(0===e.values.length?(n=!1,cli.log($.RED+"Expected value:",$.CLEAR+e.name,"expects a",s.type+"!")):e.values.forEach((t=>{typeof t!==s.type&&(n=!1,cli.log($.RED+"Incorrect type:",$.CLEAR+e.name,"must be a",s.type+"!"))}))),n&&(void 0!==t[e.name]?t[e.name].push(...e.values):t[e.name]=e.values)}else cli.log($.RED+"Unexpected flag:",$.CLEAR+e.name)}));let s=!1;n.getFlags().forEach((e=>{e.required&&("*"===e.name?0===Object.keys(t).length&&(s=!0,cli.log($.RED+"At least one flag is required!")):void 0===Object.keys(t).find((t=>t===e.name))&&(s=!0,cli.log($.RED+"Missing required flag:",$.CLEAR+e.name)))})),s||n.callback(t)}else""!==s&&cli.log($.RED+"Unknown command:",$.CLEAR+e.commands.join(" -> "))})((()=>{const e=process.argv.slice(2);let t=[],s=[];return e.forEach((e=>{if(e.startsWith("-"))e.startsWith("--")?s.push({name:e.slice(2),values:[]}):e.slice(1).split("").forEach((e=>{s.push({name:e,values:[]})}));else if(s.length>0){let t;t=e.match(/^[0-9]+$/)?Number(e):"true"===e||"false"===e?Boolean(e):e,s[s.length-1].values.push(t)}else t.push(e)})),{commands:t,flags:s}})()))})),{log:(...e)=>{process.stdout.write(e.join(" ")+$.CLEAR+"\n")},addCommand:(s,n)=>{const a=new e(s,n);return t.push(a),a},question:async function(e){const t=s.createInterface({input:process.stdin,output:process.stdout});return new Promise((s=>{t.question(""===e?"":e+" ",(e=>{t.close(),s(e)}))}))}}}();